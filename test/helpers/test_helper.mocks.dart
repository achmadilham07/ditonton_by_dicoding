// Mocks generated by Mockito 5.0.16 from annotations
// in ditonton/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:convert' as _i22;
import 'dart:typed_data' as _i23;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ditonton/common/failure.dart' as _i9;
import 'package:ditonton/data/datasources/db/database_helper.dart' as _i20;
import 'package:ditonton/data/datasources/film_local_data_source.dart' as _i18;
import 'package:ditonton/data/datasources/film_remote_data_source.dart' as _i15;
import 'package:ditonton/data/models/episode_response.dart' as _i5;
import 'package:ditonton/data/models/movie_detail_model.dart' as _i3;
import 'package:ditonton/data/models/movie_model.dart' as _i16;
import 'package:ditonton/data/models/movie_table.dart' as _i19;
import 'package:ditonton/data/models/tv_detail_model.dart' as _i4;
import 'package:ditonton/data/models/tv_model.dart' as _i17;
import 'package:ditonton/domain/entities/movie.dart' as _i10;
import 'package:ditonton/domain/entities/movie_detail.dart' as _i11;
import 'package:ditonton/domain/entities/tv.dart' as _i12;
import 'package:ditonton/domain/entities/tv_detail.dart' as _i13;
import 'package:ditonton/domain/entities/watchlist.dart' as _i14;
import 'package:ditonton/domain/repositories/movie_repository.dart' as _i7;
import 'package:http/http.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i21;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeMovieDetailResponse_1 extends _i1.Fake
    implements _i3.MovieDetailResponse {}

class _FakeTvDetailResponse_2 extends _i1.Fake implements _i4.TvDetailResponse {
}

class _FakeEpisodeResponse_3 extends _i1.Fake implements _i5.EpisodeResponse {}

class _FakeResponse_4 extends _i1.Fake implements _i6.Response {}

class _FakeStreamedResponse_5 extends _i1.Fake implements _i6.StreamedResponse {
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i7.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.Movie>>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i10.Movie>>>.value(
              _FakeEither_0<_i9.Failure, List<_i10.Movie>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i10.Movie>>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.Movie>>> getPopularMovies() =>
      (super.noSuchMethod(Invocation.method(#getPopularMovies, []),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i10.Movie>>>.value(
              _FakeEither_0<_i9.Failure, List<_i10.Movie>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i10.Movie>>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.Movie>>> getTopRatedMovies() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i10.Movie>>>.value(
              _FakeEither_0<_i9.Failure, List<_i10.Movie>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i10.Movie>>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, _i11.MovieDetail>> getMovieDetail(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
          returnValue: Future<_i2.Either<_i9.Failure, _i11.MovieDetail>>.value(
              _FakeEither_0<_i9.Failure, _i11.MovieDetail>())) as _i8
          .Future<_i2.Either<_i9.Failure, _i11.MovieDetail>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.Movie>>> getMovieRecommendations(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i10.Movie>>>.value(
              _FakeEither_0<_i9.Failure, List<_i10.Movie>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i10.Movie>>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.Movie>>> searchMovies(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i10.Movie>>>.value(
              _FakeEither_0<_i9.Failure, List<_i10.Movie>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i10.Movie>>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i12.Tv>>> getNowPlayingTv() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingTv, []),
              returnValue: Future<_i2.Either<_i9.Failure, List<_i12.Tv>>>.value(
                  _FakeEither_0<_i9.Failure, List<_i12.Tv>>()))
          as _i8.Future<_i2.Either<_i9.Failure, List<_i12.Tv>>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i12.Tv>>> getPopularTv() =>
      (super.noSuchMethod(Invocation.method(#getPopularTv, []),
              returnValue: Future<_i2.Either<_i9.Failure, List<_i12.Tv>>>.value(
                  _FakeEither_0<_i9.Failure, List<_i12.Tv>>()))
          as _i8.Future<_i2.Either<_i9.Failure, List<_i12.Tv>>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i12.Tv>>> getTopRatedTv() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedTv, []),
              returnValue: Future<_i2.Either<_i9.Failure, List<_i12.Tv>>>.value(
                  _FakeEither_0<_i9.Failure, List<_i12.Tv>>()))
          as _i8.Future<_i2.Either<_i9.Failure, List<_i12.Tv>>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, _i13.TvDetail>> getTvDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvDetail, [id]),
              returnValue: Future<_i2.Either<_i9.Failure, _i13.TvDetail>>.value(
                  _FakeEither_0<_i9.Failure, _i13.TvDetail>()))
          as _i8.Future<_i2.Either<_i9.Failure, _i13.TvDetail>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i5.Episode>>> getTvEpisode(
          int? idTv, int? idEpisode) =>
      (super.noSuchMethod(Invocation.method(#getTvEpisode, [idTv, idEpisode]),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i5.Episode>>>.value(
              _FakeEither_0<_i9.Failure, List<_i5.Episode>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i5.Episode>>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i12.Tv>>> getTvRecommendations(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvRecommendations, [id]),
              returnValue: Future<_i2.Either<_i9.Failure, List<_i12.Tv>>>.value(
                  _FakeEither_0<_i9.Failure, List<_i12.Tv>>()))
          as _i8.Future<_i2.Either<_i9.Failure, List<_i12.Tv>>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i12.Tv>>> searchTv(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTv, [query]),
              returnValue: Future<_i2.Either<_i9.Failure, List<_i12.Tv>>>.value(
                  _FakeEither_0<_i9.Failure, List<_i12.Tv>>()))
          as _i8.Future<_i2.Either<_i9.Failure, List<_i12.Tv>>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i14.Watchlist>>>
      getWatchlistFilms() => (super.noSuchMethod(
              Invocation.method(#getWatchlistFilms, []),
              returnValue:
                  Future<_i2.Either<_i9.Failure, List<_i14.Watchlist>>>.value(
                      _FakeEither_0<_i9.Failure, List<_i14.Watchlist>>()))
          as _i8.Future<_i2.Either<_i9.Failure, List<_i14.Watchlist>>>);

  @override
  _i8.Future<bool> isAddedToMovieWatchlist(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToMovieWatchlist, [id]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, String>> saveMovieWatchlist(
          _i11.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#saveMovieWatchlist, [movie]),
              returnValue: Future<_i2.Either<_i9.Failure, String>>.value(
                  _FakeEither_0<_i9.Failure, String>()))
          as _i8.Future<_i2.Either<_i9.Failure, String>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, String>> removeMovieWatchlist(
          _i11.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#removeMovieWatchlist, [movie]),
              returnValue: Future<_i2.Either<_i9.Failure, String>>.value(
                  _FakeEither_0<_i9.Failure, String>()))
          as _i8.Future<_i2.Either<_i9.Failure, String>>);

  @override
  _i8.Future<bool> isAddedToTvWatchlist(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToTvWatchlist, [id]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, String>> saveTvWatchlist(
          _i13.TvDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#saveTvWatchlist, [movie]),
              returnValue: Future<_i2.Either<_i9.Failure, String>>.value(
                  _FakeEither_0<_i9.Failure, String>()))
          as _i8.Future<_i2.Either<_i9.Failure, String>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, String>> removeTvWatchlist(
          _i13.TvDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#removeTvWatchlist, [movie]),
              returnValue: Future<_i2.Either<_i9.Failure, String>>.value(
                  _FakeEither_0<_i9.Failure, String>()))
          as _i8.Future<_i2.Either<_i9.Failure, String>>);

  @override
  String toString() => super.toString();
}

/// A class which mocks [FilmRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilmRemoteDataSource extends _i1.Mock
    implements _i15.FilmRemoteDataSource {
  MockFilmRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i16.MovieModel>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
              returnValue:
                  Future<List<_i16.MovieModel>>.value(<_i16.MovieModel>[]))
          as _i8.Future<List<_i16.MovieModel>>);

  @override
  _i8.Future<List<_i16.MovieModel>> getPopularMovies() => (super.noSuchMethod(
          Invocation.method(#getPopularMovies, []),
          returnValue: Future<List<_i16.MovieModel>>.value(<_i16.MovieModel>[]))
      as _i8.Future<List<_i16.MovieModel>>);

  @override
  _i8.Future<List<_i16.MovieModel>> getTopRatedMovies() => (super.noSuchMethod(
          Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<List<_i16.MovieModel>>.value(<_i16.MovieModel>[]))
      as _i8.Future<List<_i16.MovieModel>>);

  @override
  _i8.Future<_i3.MovieDetailResponse> getMovieDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
              returnValue: Future<_i3.MovieDetailResponse>.value(
                  _FakeMovieDetailResponse_1()))
          as _i8.Future<_i3.MovieDetailResponse>);

  @override
  _i8.Future<List<_i16.MovieModel>> getMovieRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
              returnValue:
                  Future<List<_i16.MovieModel>>.value(<_i16.MovieModel>[]))
          as _i8.Future<List<_i16.MovieModel>>);

  @override
  _i8.Future<List<_i17.TvModel>> getNowPlayingTv() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingTv, []),
              returnValue: Future<List<_i17.TvModel>>.value(<_i17.TvModel>[]))
          as _i8.Future<List<_i17.TvModel>>);

  @override
  _i8.Future<List<_i17.TvModel>> getPopularTv() =>
      (super.noSuchMethod(Invocation.method(#getPopularTv, []),
              returnValue: Future<List<_i17.TvModel>>.value(<_i17.TvModel>[]))
          as _i8.Future<List<_i17.TvModel>>);

  @override
  _i8.Future<List<_i17.TvModel>> getTopRatedTv() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedTv, []),
              returnValue: Future<List<_i17.TvModel>>.value(<_i17.TvModel>[]))
          as _i8.Future<List<_i17.TvModel>>);

  @override
  _i8.Future<_i4.TvDetailResponse> getTvDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvDetail, [id]),
              returnValue:
                  Future<_i4.TvDetailResponse>.value(_FakeTvDetailResponse_2()))
          as _i8.Future<_i4.TvDetailResponse>);

  @override
  _i8.Future<_i5.EpisodeResponse> getTvEpisode(int? idTv, int? season) =>
      (super.noSuchMethod(Invocation.method(#getTvEpisode, [idTv, season]),
              returnValue:
                  Future<_i5.EpisodeResponse>.value(_FakeEpisodeResponse_3()))
          as _i8.Future<_i5.EpisodeResponse>);

  @override
  _i8.Future<List<_i17.TvModel>> getTvRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvRecommendations, [id]),
              returnValue: Future<List<_i17.TvModel>>.value(<_i17.TvModel>[]))
          as _i8.Future<List<_i17.TvModel>>);

  @override
  _i8.Future<List<_i16.MovieModel>> searchMovies(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
              returnValue:
                  Future<List<_i16.MovieModel>>.value(<_i16.MovieModel>[]))
          as _i8.Future<List<_i16.MovieModel>>);

  @override
  _i8.Future<List<_i17.TvModel>> searchTv(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTv, [query]),
              returnValue: Future<List<_i17.TvModel>>.value(<_i17.TvModel>[]))
          as _i8.Future<List<_i17.TvModel>>);

  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieLocalDataSource extends _i1.Mock
    implements _i18.MovieLocalDataSource {
  MockMovieLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<String> insertWatchlist(_i19.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);

  @override
  _i8.Future<String> removeWatchlist(_i19.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);

  @override
  _i8.Future<List<_i19.MovieTable>> getWatchlistFilms() => (super.noSuchMethod(
          Invocation.method(#getWatchlistFilms, []),
          returnValue: Future<List<_i19.MovieTable>>.value(<_i19.MovieTable>[]))
      as _i8.Future<List<_i19.MovieTable>>);

  @override
  _i8.Future<_i19.MovieTable?> getMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieById, [id]),
              returnValue: Future<_i19.MovieTable?>.value())
          as _i8.Future<_i19.MovieTable?>);

  @override
  _i8.Future<_i19.MovieTable?> getTvById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvById, [id]),
              returnValue: Future<_i19.MovieTable?>.value())
          as _i8.Future<_i19.MovieTable?>);

  @override
  String toString() => super.toString();
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i20.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i21.Database?> get database =>
      (super.noSuchMethod(Invocation.getter(#database),
              returnValue: Future<_i21.Database?>.value())
          as _i8.Future<_i21.Database?>);

  @override
  _i8.Future<int> insertWatchlist(_i19.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);

  @override
  _i8.Future<int> removeWatchlist(_i19.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);

  @override
  _i8.Future<Map<String, dynamic>?> getMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i8.Future<Map<String, dynamic>?>);

  @override
  _i8.Future<Map<String, dynamic>?> getTvById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i8.Future<Map<String, dynamic>?>);

  @override
  _i8.Future<List<Map<String, dynamic>>> getWatchlistFilms() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistFilms, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i8.Future<List<Map<String, dynamic>>>);

  @override
  String toString() => super.toString();
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i6.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i22.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i22.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i22.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i22.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);

  @override
  _i8.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i8.Future<String>);

  @override
  _i8.Future<_i23.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i23.Uint8List>.value(_i23.Uint8List(0)))
          as _i8.Future<_i23.Uint8List>);

  @override
  _i8.Future<_i6.StreamedResponse> send(_i6.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i6.StreamedResponse>.value(_FakeStreamedResponse_5()))
          as _i8.Future<_i6.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);

  @override
  String toString() => super.toString();
}
